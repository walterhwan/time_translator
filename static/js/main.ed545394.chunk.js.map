{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["moment","suppressDeprecationWarnings","epochToISO","epoch","value","Number","Date","toISOString","isoDateToTimezone","isoDate","timezoneString","note","isValid","tz","format","App","React","useState","now","epochInput","setEpochInput","isoDateInput","setIsoDateInput","localTimeString","pacificTimeString","mountainTimeString","centralTimeString","easternTimeString","utcTimeString","nepalTimeString","className","type","onClick","htmlFor","id","autoFocus","onChange","event","target","replace","getTime","isoDateToEpoch","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6OAIAA,IAAOC,6BAA8B,EAQrC,SAASC,EAAWC,GAClB,IAAMC,EAAyB,kBAAVD,EAAqBE,OAAOF,GAASA,EAC1D,IACE,OAAO,IAAIG,KAAKF,GAAOG,cACvB,SACA,MAXiB,OA+BrB,SAASC,EAAkBC,EAASC,EAAgBC,GAClD,OAAIX,IAAOS,GAASG,UAEhBZ,IAAOS,GAASI,GAAGH,GAAgBI,OAAO,0BAA1C,WAA0EH,GAlC3D,MA4GNI,MAnEf,WAAgB,IAlBkBN,EAkBnB,EACuBO,IAAMC,SAASX,KAAKY,OAD3C,mBACNC,EADM,KACMC,EADN,OAE2BJ,IAAMC,SAASf,EAAWiB,IAFrD,mBAENE,EAFM,KAEQC,EAFR,KAIPC,GAtB0Bd,EAsBiBY,EArB7CrB,IAAOS,GAASG,UACXZ,IAAOS,GAASK,OAAO,0BAA4B,gBAzBzC,OA8CbU,EAAoBhB,EAAkBa,EAAc,sBAAuB,SAC3EI,EAAqBjB,EAAkBa,EAAc,iBAAkB,SACvEK,EAAoBlB,EAAkBa,EAAc,kBAAmB,SACvEM,EAAoBnB,EAAkBa,EAAc,mBAAoB,SACxEO,EAAgBpB,EAAkBa,EAAc,UAAW,SAC3DQ,EAAkBrB,EAAkBa,EAAc,iBAAkB,eAoB1E,OACE,yBAAKS,UAAU,OACb,yBAAKA,UAAU,cACb,yBAAKA,UAAU,SAAf,mBACA,4BAAQA,UAAU,aAAaC,KAAK,SAASC,QAVtB,WAC3B,IAAM7B,EAAQG,KAAKY,MACnBE,EAAcjB,GACdmB,EAAgBpB,EAAWC,MAOvB,uBAEA,2BAAO8B,QAAQ,eAAf,mCACA,2BACEH,UAAU,cACVI,GAAG,cACHC,WAAS,EACTJ,KAAK,OACL3B,MAAOe,EACPiB,SA/BkB,SAACC,GACzB,IAAMlC,EAA8BkC,EAAMC,OAAOlC,MAnDrCmC,QAAQ,SAAU,IAoD9BnB,EAAcjB,GACdmB,EAAgBpB,EAAWC,OA+BvB,2BAAO8B,QAAQ,aAAf,YACA,2BACEH,UAAU,YACVI,GAAG,YACHC,WAAS,EACTJ,KAAK,OACL3B,MAAOiB,EACPe,SAnCoB,SAACC,GAC3B,IAAM5B,EAAU4B,EAAMC,OAAOlC,MAC7BkB,EAAgBb,GAChBW,EA/CJ,SAAwBX,GACtB,IACE,OAAO,IAAIH,KAAKG,GAAS+B,WAjBR,MAkBjB,SACA,MAnBiB,OA8DHC,CAAehC,OAkCzB,yBAAKqB,UAAU,uBAAuBP,GACtC,yBAAKO,UAAU,uBAAuBN,GACtC,yBAAKM,UAAU,uBAAuBL,GACtC,yBAAKK,UAAU,uBAAuBJ,GACtC,yBAAKI,UAAU,uBAAuBH,GACtC,yBAAKG,UAAU,uBAAuBF,GACtC,yBAAKE,UAAU,uBAAuBD,MChG1Ba,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ed545394.chunk.js","sourcesContent":["import React from 'react'\nimport moment from 'moment-timezone'\nimport './App.css'\n\nmoment.suppressDeprecationWarnings = true\n\nconst PLACE_HOLDER = '---'\n\nfunction replaceNonDigitString(string) {\n  return string.replace(/[^\\d]/g, '')\n}\n\nfunction epochToISO(epoch) {\n  const value = typeof epoch === 'string' ? Number(epoch) : epoch\n  try {\n    return new Date(value).toISOString()\n  } catch {\n    return PLACE_HOLDER\n  }\n}\n\nfunction isoDateToEpoch(isoDate) {\n  try {\n    return new Date(isoDate).getTime() || PLACE_HOLDER\n  } catch {\n    return PLACE_HOLDER\n  }\n}\n\nfunction isoDateToLocalDateString(isoDate) {\n  if (moment(isoDate).isValid()) {\n    return moment(isoDate).format('YYYY-MM-DD, hh:mm:ss A') + ' (Local Time)'\n  } else {\n    return PLACE_HOLDER\n  }\n}\n\nfunction isoDateToTimezone(isoDate, timezoneString, note) {\n  if (moment(isoDate).isValid()) {\n    return (\n      moment(isoDate).tz(timezoneString).format('YYYY-MM-DD, hh:mm:ss A') + ` ${note}`\n    )\n  } else {\n    return PLACE_HOLDER\n  }\n}\n\nfunction App() {\n  const [epochInput, setEpochInput] = React.useState(Date.now())\n  const [isoDateInput, setIsoDateInput] = React.useState(epochToISO(epochInput))\n\n  const localTimeString = isoDateToLocalDateString(isoDateInput)\n  const pacificTimeString = isoDateToTimezone(isoDateInput, 'America/Los_Angeles', '(PDT)')\n  const mountainTimeString = isoDateToTimezone(isoDateInput, 'America/Denver', '(MDT)')\n  const centralTimeString = isoDateToTimezone(isoDateInput, 'America/Chicago', '(CDT)')\n  const easternTimeString = isoDateToTimezone(isoDateInput, 'America/New_York', '(EDT)')\n  const utcTimeString = isoDateToTimezone(isoDateInput, 'Etc/UTC', '(UTC)')\n  const nepalTimeString = isoDateToTimezone(isoDateInput, 'Asia/Kathmandu', '(Nepalgunj)')\n\n  const handleEpochChange = (event) => {\n    const epoch = replaceNonDigitString(event.target.value)\n    setEpochInput(epoch)\n    setIsoDateInput(epochToISO(epoch))\n  }\n\n  const handleIsoDateChange = (event) => {\n    const isoDate = event.target.value\n    setIsoDateInput(isoDate)\n    setEpochInput(isoDateToEpoch(isoDate))\n  }\n\n  const handleSetCurrentTime = () => {\n    const epoch = Date.now()\n    setEpochInput(epoch)\n    setIsoDateInput(epochToISO(epoch))\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"center-div\">\n        <div className=\"title\">Time Translator</div>\n        <button className=\"set-button\" type=\"button\" onClick={handleSetCurrentTime}>Set to current time</button>\n        {/* Epoch */}\n        <label htmlFor=\"epoch-input\">UNIX Epoch time in milliseconds</label>\n        <input\n          className=\"epoch-input\"\n          id=\"epoch-input\"\n          autoFocus\n          type=\"text\"\n          value={epochInput}\n          onChange={handleEpochChange}\n        ></input>\n        {/* ISO Date */}\n        <label htmlFor=\"iso-input\">ISO 8601</label>\n        <input\n          className=\"iso-input\"\n          id=\"iso-input\"\n          autoFocus\n          type=\"text\"\n          value={isoDateInput}\n          onChange={handleIsoDateChange}\n        ></input>\n        <div className='human-readable-time'>{localTimeString}</div>\n        <div className='human-readable-time'>{pacificTimeString}</div>\n        <div className='human-readable-time'>{mountainTimeString}</div>\n        <div className='human-readable-time'>{centralTimeString}</div>\n        <div className='human-readable-time'>{easternTimeString}</div>\n        <div className='human-readable-time'>{utcTimeString}</div>\n        <div className='human-readable-time'>{nepalTimeString}</div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}